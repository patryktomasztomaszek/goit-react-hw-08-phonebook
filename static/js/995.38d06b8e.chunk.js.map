{"version":3,"file":"static/js/995.38d06b8e.chunk.js","mappings":"iSACA,EAAoC,4C,UCmGpC,EA5FyB,WACvB,OAAiBA,EAAAA,EAAAA,MAAVC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAa,mCAAG,WAAMC,GAAN,0FACpBA,EAAEC,iBACIC,EAAOF,EAAEG,OACTC,EAAYF,EAAKE,UAAUC,MAC3BC,EAAWJ,EAAKI,SAASD,MACzBE,EALc,UAKJH,EALI,YAKSE,GACvBE,EAAQN,EAAKM,MAAMH,MACnBI,EAAWP,EAAKO,SAASJ,MACzBK,EAAkBR,EAAKQ,gBAAgBL,MAEzCI,IAAaC,EAVG,0CAWXC,MAAM,qDAXK,eAcdC,EAAc,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,GAdf,UAedf,EAAOkB,GACVC,SACAC,MAAK,YAAuC,IAApCC,EAAmC,EAAnCA,MAAmC,IAA5BC,KAAQR,EAAoB,EAApBA,MAAOD,EAAa,EAAbA,KAC7BU,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,IACzCA,GACFpB,GAAS0B,EAAAA,EAAAA,IAAQ,CAAEb,MAAAA,EAAOD,KAAAA,IAE7B,IACAe,OAAM,WACLX,MAAM,+CACP,IAzBiB,yBA2BAQ,KAAKI,MAAMN,aAAaO,QAAQ,UA3BhC,gBA4BNC,KADRV,EA3Bc,4EAgCdpB,GAAS+B,EAAAA,EAAAA,IAASX,IAhCJ,yBAiCdlB,EAAS,aAjCK,QAkCpBK,EAAKyB,QAlCe,4CAAH,sDAqCXC,EAAsBC,EAC9B,OACE,+BACE,kBAAMC,UAAWF,EAAmBG,SAAUhC,EAA9C,WACE,2CAEE,kBAAOiC,KAAK,OAAOzB,KAAK,YAAY0B,UAAQ,QAE9C,0CAEE,kBAAOD,KAAK,OAAOzB,KAAK,WAAW0B,UAAQ,QAE7C,uCAEE,kBACED,KAAK,QACLzB,KAAK,QACL2B,QAAQ,0CACRC,aAAa,QACbF,UAAQ,QAGZ,yCAEE,kBACED,KAAK,WACLzB,KAAK,WACL2B,QAAQ,uCACRE,MAAM,yGACND,aAAa,eACbF,UAAQ,QAGZ,iDAEE,kBACED,KAAK,WACLzB,KAAK,kBACL2B,QAAQ,uCACRE,MAAM,yGACND,aAAa,uBACbF,UAAQ,QAGZ,mBAAQD,KAAK,SAAb,kCAIP,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/RegistrationPage/RegistrationPage.module.scss?bbbb","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registration_form\":\"RegistrationPage_registration_form__e6TtY\"};","import React from 'react';\nimport { useSignupMutation } from 'services/phonebookApi';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addUser } from 'redux/userSlice';\nimport { addToken } from 'redux/tokenSlice';\nimport styles from './RegistrationPage.module.scss';\n\nconst RegistrationPage = () => {\n  const [signup] = useSignupMutation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const firstName = form.firstName.value;\n    const lastName = form.lastName.value;\n    const name = `${firstName} ${lastName}`;\n    const email = form.email.value;\n    const password = form.password.value;\n    const passwordConfirm = form.passwordConfirm.value;\n\n    if (password !== passwordConfirm) {\n      return alert('Password and password confirmation do not match!');\n    }\n\n    const credentials = { name, email, password };\n    await signup(credentials)\n      .unwrap()\n      .then(({ token, user: { email, name } }) => {\n        localStorage.setItem('token', JSON.stringify(token));\n        if (token) {\n          dispatch(addUser({ email, name }));\n        }\n      })\n      .catch(() => {\n        alert('User with this email address already exists!');\n      });\n\n    const token = await JSON.parse(localStorage.getItem('token'));\n    if (token === undefined) {\n      return;\n    }\n\n    await dispatch(addToken(token));\n    await navigate('/contacts');\n    form.reset();\n  };\n\n  const { registration_form } = styles;\n  return (\n    <>\n      <form className={registration_form} onSubmit={submitHandler}>\n        <label>\n          First name\n          <input type=\"text\" name=\"firstName\" required />\n        </label>\n        <label>\n          Last name\n          <input type=\"text\" name=\"lastName\" required />\n        </label>\n        <label>\n          E-mail\n          <input\n            type=\"email\"\n            name=\"email\"\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n            autoComplete=\"email\"\n            required\n          />\n        </label>\n        <label>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n            title=\"Must contain at least one uppercase and lowercase letter, one number and at least 8 or more characters\"\n            autoComplete=\"new-password\"\n            required\n          />\n        </label>\n        <label>\n          Confirm password\n          <input\n            type=\"password\"\n            name=\"passwordConfirm\"\n            pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n            title=\"Must contain at least one uppercase and lowercase letter, one number and at least 8 or more characters\"\n            autoComplete=\"new-password-confirm\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Register account</button>\n      </form>\n    </>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["useSignupMutation","signup","dispatch","useDispatch","navigate","useNavigate","submitHandler","e","preventDefault","form","target","firstName","value","lastName","name","email","password","passwordConfirm","alert","credentials","unwrap","then","token","user","localStorage","setItem","JSON","stringify","addUser","catch","parse","getItem","undefined","addToken","reset","registration_form","styles","className","onSubmit","type","required","pattern","autoComplete","title"],"sourceRoot":""}